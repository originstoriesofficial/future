"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fal-ai";
exports.ids = ["vendor-chunks/@fal-ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@fal-ai/client/package.json":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/package.json ***!
  \**************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@fal-ai/client","description":"The fal.ai client for JavaScript and TypeScript","version":"1.6.2","license":"MIT","repository":{"type":"git","url":"https://github.com/fal-ai/fal-js.git","directory":"libs/client"},"keywords":["fal","client","ai","ml","typescript"],"exports":{".":"./src/index.js","./endpoints":"./src/types/endpoints.js"},"typesVersions":{"*":{"endpoints":["src/types/endpoints.d.ts"]}},"main":"./src/index.js","types":"./src/index.d.ts","dependencies":{"@msgpack/msgpack":"^3.0.0-beta2","eventsource-parser":"^1.1.2","robot3":"^0.4.1"},"engines":{"node":">=18.0.0"},"type":"commonjs"}');

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/auth.js":
/*!*************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/auth.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TOKEN_EXPIRATION_SECONDS = void 0;\nexports.getTemporaryAuthToken = getTemporaryAuthToken;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nexports.TOKEN_EXPIRATION_SECONDS = 120;\n/**\n * Get a token to connect to the realtime endpoint.\n */\nfunction getTemporaryAuthToken(app, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const appId = (0, utils_1.parseEndpointId)(app);\n        const token = yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/tokens/`,\n            config,\n            input: {\n                allowed_apps: [appId.alias],\n                token_expiration: exports.TOKEN_EXPIRATION_SECONDS,\n            },\n        });\n        // keep this in case the response was wrapped (old versions of the proxy do that)\n        // should be safe to remove in the future\n        if (typeof token !== \"string\" && token[\"detail\"]) {\n            return token[\"detail\"];\n        }\n        return token;\n    });\n}\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyw2QkFBNkI7QUFDN0IsaUJBQWlCLG1CQUFPLENBQUMsbUVBQVU7QUFDbkMsa0JBQWtCLG1CQUFPLENBQUMscUVBQVc7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQVM7QUFDakMsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEJBQThCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3NlYW4vZnV0dXJlL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UT0tFTl9FWFBJUkFUSU9OX1NFQ09ORFMgPSB2b2lkIDA7XG5leHBvcnRzLmdldFRlbXBvcmFyeUF1dGhUb2tlbiA9IGdldFRlbXBvcmFyeUF1dGhUb2tlbjtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuY29uc3QgcmVxdWVzdF8xID0gcmVxdWlyZShcIi4vcmVxdWVzdFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmV4cG9ydHMuVE9LRU5fRVhQSVJBVElPTl9TRUNPTkRTID0gMTIwO1xuLyoqXG4gKiBHZXQgYSB0b2tlbiB0byBjb25uZWN0IHRvIHRoZSByZWFsdGltZSBlbmRwb2ludC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGVtcG9yYXJ5QXV0aFRva2VuKGFwcCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYXBwSWQgPSAoMCwgdXRpbHNfMS5wYXJzZUVuZHBvaW50SWQpKGFwcCk7XG4gICAgICAgIGNvbnN0IHRva2VuID0geWllbGQgKDAsIHJlcXVlc3RfMS5kaXNwYXRjaFJlcXVlc3QpKHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICB0YXJnZXRVcmw6IGAkeygwLCBjb25maWdfMS5nZXRSZXN0QXBpVXJsKSgpfS90b2tlbnMvYCxcbiAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgYWxsb3dlZF9hcHBzOiBbYXBwSWQuYWxpYXNdLFxuICAgICAgICAgICAgICAgIHRva2VuX2V4cGlyYXRpb246IGV4cG9ydHMuVE9LRU5fRVhQSVJBVElPTl9TRUNPTkRTLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGtlZXAgdGhpcyBpbiBjYXNlIHRoZSByZXNwb25zZSB3YXMgd3JhcHBlZCAob2xkIHZlcnNpb25zIG9mIHRoZSBwcm94eSBkbyB0aGF0KVxuICAgICAgICAvLyBzaG91bGQgYmUgc2FmZSB0byByZW1vdmUgaW4gdGhlIGZ1dHVyZVxuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcInN0cmluZ1wiICYmIHRva2VuW1wiZGV0YWlsXCJdKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5bXCJkZXRhaWxcIl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/client.js":
/*!***************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/client.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createFalClient = createFalClient;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst queue_1 = __webpack_require__(/*! ./queue */ \"(rsc)/./node_modules/@fal-ai/client/src/queue.js\");\nconst realtime_1 = __webpack_require__(/*! ./realtime */ \"(rsc)/./node_modules/@fal-ai/client/src/realtime.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(rsc)/./node_modules/@fal-ai/client/src/storage.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/@fal-ai/client/src/streaming.js\");\n/**\n * Creates a new reference of the `FalClient`.\n * @param userConfig Optional configuration to override the default settings.\n * @returns a new instance of the `FalClient`.\n */\nfunction createFalClient(userConfig = {}) {\n    const config = (0, config_1.createConfig)(userConfig);\n    const storage = (0, storage_1.createStorageClient)({ config });\n    const queue = (0, queue_1.createQueueClient)({ config, storage });\n    const streaming = (0, streaming_1.createStreamingClient)({ config, storage });\n    const realtime = (0, realtime_1.createRealtimeClient)({ config });\n    return {\n        queue,\n        realtime,\n        storage,\n        streaming,\n        stream: streaming.stream,\n        run(endpointId_1) {\n            return __awaiter(this, arguments, void 0, function* (endpointId, options = {}) {\n                const input = options.input\n                    ? yield storage.transformInput(options.input)\n                    : undefined;\n                return (0, request_1.dispatchRequest)({\n                    method: options.method,\n                    targetUrl: (0, request_1.buildUrl)(endpointId, options),\n                    input: input,\n                    config: Object.assign(Object.assign({}, config), { responseHandler: response_1.resultResponseHandler }),\n                    options: {\n                        signal: options.abortSignal,\n                        retry: {\n                            maxRetries: 3,\n                            baseDelay: 500,\n                            maxDelay: 15000,\n                        },\n                    },\n                });\n            });\n        },\n        subscribe: (endpointId, options) => __awaiter(this, void 0, void 0, function* () {\n            const { request_id: requestId } = yield queue.submit(endpointId, options);\n            if (options.onEnqueue) {\n                options.onEnqueue(requestId);\n            }\n            yield queue.subscribeToStatus(endpointId, Object.assign({ requestId }, options));\n            return queue.result(endpointId, { requestId });\n        }),\n    };\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGlCQUFpQixtQkFBTyxDQUFDLG1FQUFVO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFTO0FBQ2pDLG1CQUFtQixtQkFBTyxDQUFDLHVFQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHFFQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHVFQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHFFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLHlFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQSx5REFBeUQsUUFBUTtBQUNqRSxtREFBbUQsaUJBQWlCO0FBQ3BFLCtEQUErRCxpQkFBaUI7QUFDaEYsNERBQTRELFFBQVE7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsYUFBYSxtREFBbUQ7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLFdBQVc7QUFDakYsOENBQThDLFdBQVc7QUFDekQsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3NlYW4vZnV0dXJlL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUZhbENsaWVudCA9IGNyZWF0ZUZhbENsaWVudDtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuY29uc3QgcXVldWVfMSA9IHJlcXVpcmUoXCIuL3F1ZXVlXCIpO1xuY29uc3QgcmVhbHRpbWVfMSA9IHJlcXVpcmUoXCIuL3JlYWx0aW1lXCIpO1xuY29uc3QgcmVxdWVzdF8xID0gcmVxdWlyZShcIi4vcmVxdWVzdFwiKTtcbmNvbnN0IHJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZVwiKTtcbmNvbnN0IHN0b3JhZ2VfMSA9IHJlcXVpcmUoXCIuL3N0b3JhZ2VcIik7XG5jb25zdCBzdHJlYW1pbmdfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbWluZ1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWZlcmVuY2Ugb2YgdGhlIGBGYWxDbGllbnRgLlxuICogQHBhcmFtIHVzZXJDb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBzZXR0aW5ncy5cbiAqIEByZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBgRmFsQ2xpZW50YC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRmFsQ2xpZW50KHVzZXJDb25maWcgPSB7fSkge1xuICAgIGNvbnN0IGNvbmZpZyA9ICgwLCBjb25maWdfMS5jcmVhdGVDb25maWcpKHVzZXJDb25maWcpO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSAoMCwgc3RvcmFnZV8xLmNyZWF0ZVN0b3JhZ2VDbGllbnQpKHsgY29uZmlnIH0pO1xuICAgIGNvbnN0IHF1ZXVlID0gKDAsIHF1ZXVlXzEuY3JlYXRlUXVldWVDbGllbnQpKHsgY29uZmlnLCBzdG9yYWdlIH0pO1xuICAgIGNvbnN0IHN0cmVhbWluZyA9ICgwLCBzdHJlYW1pbmdfMS5jcmVhdGVTdHJlYW1pbmdDbGllbnQpKHsgY29uZmlnLCBzdG9yYWdlIH0pO1xuICAgIGNvbnN0IHJlYWx0aW1lID0gKDAsIHJlYWx0aW1lXzEuY3JlYXRlUmVhbHRpbWVDbGllbnQpKHsgY29uZmlnIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHF1ZXVlLFxuICAgICAgICByZWFsdGltZSxcbiAgICAgICAgc3RvcmFnZSxcbiAgICAgICAgc3RyZWFtaW5nLFxuICAgICAgICBzdHJlYW06IHN0cmVhbWluZy5zdHJlYW0sXG4gICAgICAgIHJ1bihlbmRwb2ludElkXzEpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgYXJndW1lbnRzLCB2b2lkIDAsIGZ1bmN0aW9uKiAoZW5kcG9pbnRJZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBvcHRpb25zLmlucHV0XG4gICAgICAgICAgICAgICAgICAgID8geWllbGQgc3RvcmFnZS50cmFuc2Zvcm1JbnB1dChvcHRpb25zLmlucHV0KVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIHJlcXVlc3RfMS5kaXNwYXRjaFJlcXVlc3QpKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VXJsOiAoMCwgcmVxdWVzdF8xLmJ1aWxkVXJsKShlbmRwb2ludElkLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGlucHV0LFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKSwgeyByZXNwb25zZUhhbmRsZXI6IHJlc3BvbnNlXzEucmVzdWx0UmVzcG9uc2VIYW5kbGVyIH0pLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFJldHJpZXM6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZURlbGF5OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RGVsYXk6IDE1MDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmU6IChlbmRwb2ludElkLCBvcHRpb25zKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVlc3RfaWQ6IHJlcXVlc3RJZCB9ID0geWllbGQgcXVldWUuc3VibWl0KGVuZHBvaW50SWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25FbnF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVucXVldWUocmVxdWVzdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHF1ZXVlLnN1YnNjcmliZVRvU3RhdHVzKGVuZHBvaW50SWQsIE9iamVjdC5hc3NpZ24oeyByZXF1ZXN0SWQgfSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXVlLnJlc3VsdChlbmRwb2ludElkLCB7IHJlcXVlc3RJZCB9KTtcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/config.js":
/*!***************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/config.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.credentialsFromEnv = void 0;\nexports.resolveDefaultFetch = resolveDefaultFetch;\nexports.createConfig = createConfig;\nexports.getRestApiUrl = getRestApiUrl;\nconst middleware_1 = __webpack_require__(/*! ./middleware */ \"(rsc)/./node_modules/@fal-ai/client/src/middleware.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst retry_1 = __webpack_require__(/*! ./retry */ \"(rsc)/./node_modules/@fal-ai/client/src/retry.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nfunction resolveDefaultFetch() {\n    if (typeof fetch === \"undefined\") {\n        throw new Error(\"Your environment does not support fetch. Please provide your own fetch implementation.\");\n    }\n    return fetch;\n}\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */\nfunction hasEnvVariables() {\n    return (typeof process !== \"undefined\" &&\n        process.env &&\n        (typeof process.env.FAL_KEY !== \"undefined\" ||\n            (typeof process.env.FAL_KEY_ID !== \"undefined\" &&\n                typeof process.env.FAL_KEY_SECRET !== \"undefined\")));\n}\nconst credentialsFromEnv = () => {\n    if (!hasEnvVariables()) {\n        return undefined;\n    }\n    if (typeof process.env.FAL_KEY !== \"undefined\") {\n        return process.env.FAL_KEY;\n    }\n    return process.env.FAL_KEY_ID\n        ? `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`\n        : undefined;\n};\nexports.credentialsFromEnv = credentialsFromEnv;\nconst DEFAULT_CONFIG = {\n    credentials: exports.credentialsFromEnv,\n    suppressLocalCredentialsWarning: false,\n    requestMiddleware: (request) => Promise.resolve(request),\n    responseHandler: response_1.defaultResponseHandler,\n    retry: retry_1.DEFAULT_RETRY_OPTIONS,\n};\n/**\n * Configures the fal client.\n *\n * @param config the new configuration.\n */\nfunction createConfig(config) {\n    var _a;\n    let configuration = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), config), { fetch: (_a = config.fetch) !== null && _a !== void 0 ? _a : resolveDefaultFetch(), \n        // Merge retry configuration with defaults\n        retry: Object.assign(Object.assign({}, retry_1.DEFAULT_RETRY_OPTIONS), (config.retry || {})) });\n    if (config.proxyUrl) {\n        configuration = Object.assign(Object.assign({}, configuration), { requestMiddleware: (0, middleware_1.withMiddleware)(configuration.requestMiddleware, (0, middleware_1.withProxy)({ targetUrl: config.proxyUrl })) });\n    }\n    const { credentials: resolveCredentials, suppressLocalCredentialsWarning } = configuration;\n    const credentials = typeof resolveCredentials === \"function\"\n        ? resolveCredentials()\n        : resolveCredentials;\n    if ((0, runtime_1.isBrowser)() && credentials && !suppressLocalCredentialsWarning) {\n        console.warn(\"The fal credentials are exposed in the browser's environment. \" +\n            \"That's not recommended for production use cases.\");\n    }\n    return configuration;\n}\n/**\n * @returns the URL of the fal REST api endpoint.\n */\nfunction getRestApiUrl() {\n    return \"https://rest.alpha.fal.ai\";\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLG9CQUFvQjtBQUNwQixxQkFBcUI7QUFDckIscUJBQXFCLG1CQUFPLENBQUMsMkVBQWM7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsdUVBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQVM7QUFDakMsa0JBQWtCLG1CQUFPLENBQUMscUVBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1QkFBdUIsR0FBRywyQkFBMkI7QUFDbEU7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLDhCQUE4QjtBQUNsRztBQUNBLDZDQUE2QyxxREFBcUQsSUFBSTtBQUN0RztBQUNBLHNEQUFzRCxvQkFBb0IsbUhBQW1ILDRCQUE0QixJQUFJO0FBQzdOO0FBQ0EsWUFBWSxtRUFBbUU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWFuL2Z1dHVyZS9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52ID0gdm9pZCAwO1xuZXhwb3J0cy5yZXNvbHZlRGVmYXVsdEZldGNoID0gcmVzb2x2ZURlZmF1bHRGZXRjaDtcbmV4cG9ydHMuY3JlYXRlQ29uZmlnID0gY3JlYXRlQ29uZmlnO1xuZXhwb3J0cy5nZXRSZXN0QXBpVXJsID0gZ2V0UmVzdEFwaVVybDtcbmNvbnN0IG1pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCIuL21pZGRsZXdhcmVcIik7XG5jb25zdCByZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2VcIik7XG5jb25zdCByZXRyeV8xID0gcmVxdWlyZShcIi4vcmV0cnlcIik7XG5jb25zdCBydW50aW1lXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZURlZmF1bHRGZXRjaCgpIHtcbiAgICBpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdXIgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBmZXRjaC4gUGxlYXNlIHByb3ZpZGUgeW91ciBvd24gZmV0Y2ggaW1wbGVtZW50YXRpb24uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2g7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcmVxdWlyZWQgRkFMIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0LlxuICpcbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQsXG4gKiBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaGFzRW52VmFyaWFibGVzKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYgJiZcbiAgICAgICAgKHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAgICAgICAodHlwZW9mIHByb2Nlc3MuZW52LkZBTF9LRVlfSUQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWV9TRUNSRVQgIT09IFwidW5kZWZpbmVkXCIpKSk7XG59XG5jb25zdCBjcmVkZW50aWFsc0Zyb21FbnYgPSAoKSA9PiB7XG4gICAgaWYgKCFoYXNFbnZWYXJpYWJsZXMoKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkZBTF9LRVkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LkZBTF9LRVk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLmVudi5GQUxfS0VZX0lEXG4gICAgICAgID8gYCR7cHJvY2Vzcy5lbnYuRkFMX0tFWV9JRH06JHtwcm9jZXNzLmVudi5GQUxfS0VZX1NFQ1JFVH1gXG4gICAgICAgIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52ID0gY3JlZGVudGlhbHNGcm9tRW52O1xuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgY3JlZGVudGlhbHM6IGV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52LFxuICAgIHN1cHByZXNzTG9jYWxDcmVkZW50aWFsc1dhcm5pbmc6IGZhbHNlLFxuICAgIHJlcXVlc3RNaWRkbGV3YXJlOiAocmVxdWVzdCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3QpLFxuICAgIHJlc3BvbnNlSGFuZGxlcjogcmVzcG9uc2VfMS5kZWZhdWx0UmVzcG9uc2VIYW5kbGVyLFxuICAgIHJldHJ5OiByZXRyeV8xLkRFRkFVTFRfUkVUUllfT1BUSU9OUyxcbn07XG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIGZhbCBjbGllbnQuXG4gKlxuICogQHBhcmFtIGNvbmZpZyB0aGUgbmV3IGNvbmZpZ3VyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcpLCBjb25maWcpLCB7IGZldGNoOiAoX2EgPSBjb25maWcuZmV0Y2gpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlc29sdmVEZWZhdWx0RmV0Y2goKSwgXG4gICAgICAgIC8vIE1lcmdlIHJldHJ5IGNvbmZpZ3VyYXRpb24gd2l0aCBkZWZhdWx0c1xuICAgICAgICByZXRyeTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXRyeV8xLkRFRkFVTFRfUkVUUllfT1BUSU9OUyksIChjb25maWcucmV0cnkgfHwge30pKSB9KTtcbiAgICBpZiAoY29uZmlnLnByb3h5VXJsKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3VyYXRpb24pLCB7IHJlcXVlc3RNaWRkbGV3YXJlOiAoMCwgbWlkZGxld2FyZV8xLndpdGhNaWRkbGV3YXJlKShjb25maWd1cmF0aW9uLnJlcXVlc3RNaWRkbGV3YXJlLCAoMCwgbWlkZGxld2FyZV8xLndpdGhQcm94eSkoeyB0YXJnZXRVcmw6IGNvbmZpZy5wcm94eVVybCB9KSkgfSk7XG4gICAgfVxuICAgIGNvbnN0IHsgY3JlZGVudGlhbHM6IHJlc29sdmVDcmVkZW50aWFscywgc3VwcHJlc3NMb2NhbENyZWRlbnRpYWxzV2FybmluZyB9ID0gY29uZmlndXJhdGlvbjtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IHR5cGVvZiByZXNvbHZlQ3JlZGVudGlhbHMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IHJlc29sdmVDcmVkZW50aWFscygpXG4gICAgICAgIDogcmVzb2x2ZUNyZWRlbnRpYWxzO1xuICAgIGlmICgoMCwgcnVudGltZV8xLmlzQnJvd3NlcikoKSAmJiBjcmVkZW50aWFscyAmJiAhc3VwcHJlc3NMb2NhbENyZWRlbnRpYWxzV2FybmluZykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZmFsIGNyZWRlbnRpYWxzIGFyZSBleHBvc2VkIGluIHRoZSBicm93c2VyJ3MgZW52aXJvbm1lbnQuIFwiICtcbiAgICAgICAgICAgIFwiVGhhdCdzIG5vdCByZWNvbW1lbmRlZCBmb3IgcHJvZHVjdGlvbiB1c2UgY2FzZXMuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlndXJhdGlvbjtcbn1cbi8qKlxuICogQHJldHVybnMgdGhlIFVSTCBvZiB0aGUgZmFsIFJFU1QgYXBpIGVuZHBvaW50LlxuICovXG5mdW5jdGlvbiBnZXRSZXN0QXBpVXJsKCkge1xuICAgIHJldHVybiBcImh0dHBzOi8vcmVzdC5hbHBoYS5mYWwuYWlcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fal = exports.parseEndpointId = exports.isRetryableError = exports.ValidationError = exports.ApiError = exports.withProxy = exports.withMiddleware = exports.createFalClient = void 0;\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@fal-ai/client/src/client.js\");\nvar client_2 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@fal-ai/client/src/client.js\");\nObject.defineProperty(exports, \"createFalClient\", ({ enumerable: true, get: function () { return client_2.createFalClient; } }));\nvar middleware_1 = __webpack_require__(/*! ./middleware */ \"(rsc)/./node_modules/@fal-ai/client/src/middleware.js\");\nObject.defineProperty(exports, \"withMiddleware\", ({ enumerable: true, get: function () { return middleware_1.withMiddleware; } }));\nObject.defineProperty(exports, \"withProxy\", ({ enumerable: true, get: function () { return middleware_1.withProxy; } }));\nvar response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nObject.defineProperty(exports, \"ApiError\", ({ enumerable: true, get: function () { return response_1.ApiError; } }));\nObject.defineProperty(exports, \"ValidationError\", ({ enumerable: true, get: function () { return response_1.ValidationError; } }));\nvar retry_1 = __webpack_require__(/*! ./retry */ \"(rsc)/./node_modules/@fal-ai/client/src/retry.js\");\nObject.defineProperty(exports, \"isRetryableError\", ({ enumerable: true, get: function () { return retry_1.isRetryableError; } }));\n__exportStar(__webpack_require__(/*! ./types/common */ \"(rsc)/./node_modules/@fal-ai/client/src/types/common.js\"), exports);\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nObject.defineProperty(exports, \"parseEndpointId\", ({ enumerable: true, get: function () { return utils_1.parseEndpointId; } }));\n/**\n * Creates a singleton instance of the client. This is useful as a compatibility\n * layer for existing code that uses the clients version prior to 1.0.0.\n */\nexports.fal = (function createSingletonFalClient() {\n    let currentInstance = (0, client_1.createFalClient)();\n    return {\n        config(config) {\n            currentInstance = (0, client_1.createFalClient)(config);\n        },\n        get queue() {\n            return currentInstance.queue;\n        },\n        get realtime() {\n            return currentInstance.realtime;\n        },\n        get storage() {\n            return currentInstance.storage;\n        },\n        get streaming() {\n            return currentInstance.streaming;\n        },\n        run(id, options) {\n            return currentInstance.run(id, options);\n        },\n        subscribe(endpointId, options) {\n            return currentInstance.subscribe(endpointId, options);\n        },\n        stream(endpointId, options) {\n            return currentInstance.stream(endpointId, options);\n        },\n    };\n})();\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFdBQVcsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyx1QkFBdUIsR0FBRyxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyxzQkFBc0IsR0FBRyx1QkFBdUI7QUFDcEwsaUJBQWlCLG1CQUFPLENBQUMsbUVBQVU7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLG1FQUFVO0FBQ2pDLG1EQUFrRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM5SCxtQkFBbUIsbUJBQU8sQ0FBQywyRUFBYztBQUN6QyxrREFBaUQsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDaEksNkNBQTRDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3RILGlCQUFpQixtQkFBTyxDQUFDLHVFQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxtREFBa0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDaEksY0FBYyxtQkFBTyxDQUFDLGlFQUFTO0FBQy9CLG9EQUFtRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMvSCxhQUFhLG1CQUFPLENBQUMsK0VBQWdCO0FBQ3JDLGNBQWMsbUJBQU8sQ0FBQyxpRUFBUztBQUMvQixtREFBa0QsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL3NlYW4vZnV0dXJlL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmFsID0gZXhwb3J0cy5wYXJzZUVuZHBvaW50SWQgPSBleHBvcnRzLmlzUmV0cnlhYmxlRXJyb3IgPSBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQXBpRXJyb3IgPSBleHBvcnRzLndpdGhQcm94eSA9IGV4cG9ydHMud2l0aE1pZGRsZXdhcmUgPSBleHBvcnRzLmNyZWF0ZUZhbENsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xudmFyIGNsaWVudF8yID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlRmFsQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnRfMi5jcmVhdGVGYWxDbGllbnQ7IH0gfSk7XG52YXIgbWlkZGxld2FyZV8xID0gcmVxdWlyZShcIi4vbWlkZGxld2FyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhNaWRkbGV3YXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaWRkbGV3YXJlXzEud2l0aE1pZGRsZXdhcmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoUHJveHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pZGRsZXdhcmVfMS53aXRoUHJveHk7IH0gfSk7XG52YXIgcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXBpRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3BvbnNlXzEuQXBpRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWYWxpZGF0aW9uRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3BvbnNlXzEuVmFsaWRhdGlvbkVycm9yOyB9IH0pO1xudmFyIHJldHJ5XzEgPSByZXF1aXJlKFwiLi9yZXRyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzUmV0cnlhYmxlRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJldHJ5XzEuaXNSZXRyeWFibGVFcnJvcjsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlcy9jb21tb25cIiksIGV4cG9ydHMpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlRW5kcG9pbnRJZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5wYXJzZUVuZHBvaW50SWQ7IH0gfSk7XG4vKipcbiAqIENyZWF0ZXMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIGNsaWVudC4gVGhpcyBpcyB1c2VmdWwgYXMgYSBjb21wYXRpYmlsaXR5XG4gKiBsYXllciBmb3IgZXhpc3RpbmcgY29kZSB0aGF0IHVzZXMgdGhlIGNsaWVudHMgdmVyc2lvbiBwcmlvciB0byAxLjAuMC5cbiAqL1xuZXhwb3J0cy5mYWwgPSAoZnVuY3Rpb24gY3JlYXRlU2luZ2xldG9uRmFsQ2xpZW50KCkge1xuICAgIGxldCBjdXJyZW50SW5zdGFuY2UgPSAoMCwgY2xpZW50XzEuY3JlYXRlRmFsQ2xpZW50KSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9ICgwLCBjbGllbnRfMS5jcmVhdGVGYWxDbGllbnQpKGNvbmZpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBxdWV1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SW5zdGFuY2UucXVldWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCByZWFsdGltZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SW5zdGFuY2UucmVhbHRpbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzdG9yYWdlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnN0YW5jZS5zdG9yYWdlO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc3RyZWFtaW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnN0YW5jZS5zdHJlYW1pbmc7XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bihpZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnN0YW5jZS5ydW4oaWQsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmUoZW5kcG9pbnRJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnN0YW5jZS5zdWJzY3JpYmUoZW5kcG9pbnRJZCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmVhbShlbmRwb2ludElkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEluc3RhbmNlLnN0cmVhbShlbmRwb2ludElkLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/middleware.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/middleware.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TARGET_URL_HEADER = void 0;\nexports.withMiddleware = withMiddleware;\nexports.withProxy = withProxy;\n/**\n * Setup a execution chain of middleware functions.\n *\n * @param middlewares one or more middleware functions.\n * @returns a middleware function that executes the given middlewares in order.\n */\nfunction withMiddleware(...middlewares) {\n    const isDefined = (middleware) => typeof middleware === \"function\";\n    return (config) => __awaiter(this, void 0, void 0, function* () {\n        let currentConfig = Object.assign({}, config);\n        for (const middleware of middlewares.filter(isDefined)) {\n            currentConfig = yield middleware(currentConfig);\n        }\n        return currentConfig;\n    });\n}\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nfunction withProxy(config) {\n    const passthrough = (requestConfig) => Promise.resolve(requestConfig);\n    // when running on the server, we don't need to proxy the request\n    if (typeof window === \"undefined\") {\n        return passthrough;\n    }\n    // if x-fal-target-url is already set, we skip it\n    return (requestConfig) => requestConfig.headers && exports.TARGET_URL_HEADER in requestConfig\n        ? passthrough(requestConfig)\n        : Promise.resolve(Object.assign(Object.assign({}, requestConfig), { url: config.targetUrl, headers: Object.assign(Object.assign({}, (requestConfig.headers || {})), { [exports.TARGET_URL_HEADER]: requestConfig.url }) }));\n}\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL21pZGRsZXdhcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Qsb0JBQW9CLDhEQUE4RCw4QkFBOEIsTUFBTSxnREFBZ0QsR0FBRztBQUNqTztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvc2Vhbi9mdXR1cmUvbm9kZV9tb2R1bGVzL0BmYWwtYWkvY2xpZW50L3NyYy9taWRkbGV3YXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gdm9pZCAwO1xuZXhwb3J0cy53aXRoTWlkZGxld2FyZSA9IHdpdGhNaWRkbGV3YXJlO1xuZXhwb3J0cy53aXRoUHJveHkgPSB3aXRoUHJveHk7XG4vKipcbiAqIFNldHVwIGEgZXhlY3V0aW9uIGNoYWluIG9mIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlcyBvbmUgb3IgbW9yZSBtaWRkbGV3YXJlIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIGEgbWlkZGxld2FyZSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBtaWRkbGV3YXJlcyBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gd2l0aE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpIHtcbiAgICBjb25zdCBpc0RlZmluZWQgPSAobWlkZGxld2FyZSkgPT4gdHlwZW9mIG1pZGRsZXdhcmUgPT09IFwiZnVuY3Rpb25cIjtcbiAgICByZXR1cm4gKGNvbmZpZykgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgY3VycmVudENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG4gICAgICAgIGZvciAoY29uc3QgbWlkZGxld2FyZSBvZiBtaWRkbGV3YXJlcy5maWx0ZXIoaXNEZWZpbmVkKSkge1xuICAgICAgICAgICAgY3VycmVudENvbmZpZyA9IHlpZWxkIG1pZGRsZXdhcmUoY3VycmVudENvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb25maWc7XG4gICAgfSk7XG59XG5leHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gXCJ4LWZhbC10YXJnZXQtdXJsXCI7XG5mdW5jdGlvbiB3aXRoUHJveHkoY29uZmlnKSB7XG4gICAgY29uc3QgcGFzc3Rocm91Z2ggPSAocmVxdWVzdENvbmZpZykgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3RDb25maWcpO1xuICAgIC8vIHdoZW4gcnVubmluZyBvbiB0aGUgc2VydmVyLCB3ZSBkb24ndCBuZWVkIHRvIHByb3h5IHRoZSByZXF1ZXN0XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhc3N0aHJvdWdoO1xuICAgIH1cbiAgICAvLyBpZiB4LWZhbC10YXJnZXQtdXJsIGlzIGFscmVhZHkgc2V0LCB3ZSBza2lwIGl0XG4gICAgcmV0dXJuIChyZXF1ZXN0Q29uZmlnKSA9PiByZXF1ZXN0Q29uZmlnLmhlYWRlcnMgJiYgZXhwb3J0cy5UQVJHRVRfVVJMX0hFQURFUiBpbiByZXF1ZXN0Q29uZmlnXG4gICAgICAgID8gcGFzc3Rocm91Z2gocmVxdWVzdENvbmZpZylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0Q29uZmlnKSwgeyB1cmw6IGNvbmZpZy50YXJnZXRVcmwsIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKHJlcXVlc3RDb25maWcuaGVhZGVycyB8fCB7fSkpLCB7IFtleHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSXTogcmVxdWVzdENvbmZpZy51cmwgfSkgfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlkZGxld2FyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/middleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/queue.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/queue.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createQueueClient = void 0;\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst retry_1 = __webpack_require__(/*! ./retry */ \"(rsc)/./node_modules/@fal-ai/client/src/retry.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/@fal-ai/client/src/streaming.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst DEFAULT_POLL_INTERVAL = 500;\n// Queue operations benefit from more aggressive retry policies\nconst QUEUE_RETRY_CONFIG = {\n    maxRetries: 3,\n    baseDelay: 1000,\n    maxDelay: 60000,\n    retryableStatusCodes: retry_1.DEFAULT_RETRYABLE_STATUS_CODES,\n};\n// Status checking can be retried more aggressively since it's read-only\nconst QUEUE_STATUS_RETRY_CONFIG = {\n    maxRetries: 5,\n    baseDelay: 1000,\n    maxDelay: 30000,\n    retryableStatusCodes: [...retry_1.DEFAULT_RETRYABLE_STATUS_CODES, 500],\n};\nconst createQueueClient = ({ config, storage, }) => {\n    const ref = {\n        submit(endpointId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const { webhookUrl, priority, hint } = options, runOptions = __rest(options, [\"webhookUrl\", \"priority\", \"hint\"]);\n                const input = options.input\n                    ? yield storage.transformInput(options.input)\n                    : undefined;\n                return (0, request_1.dispatchRequest)({\n                    method: options.method,\n                    targetUrl: (0, request_1.buildUrl)(endpointId, Object.assign(Object.assign({}, runOptions), { subdomain: \"queue\", query: webhookUrl ? { fal_webhook: webhookUrl } : undefined })),\n                    headers: Object.assign({ \"x-fal-queue-priority\": priority !== null && priority !== void 0 ? priority : \"normal\" }, (hint && { \"x-fal-runner-hint\": hint })),\n                    input: input,\n                    config,\n                    options: {\n                        signal: options.abortSignal,\n                        retry: QUEUE_RETRY_CONFIG,\n                    },\n                });\n            });\n        },\n        status(endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function* (endpointId, { requestId, logs = false, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                return (0, request_1.dispatchRequest)({\n                    method: \"get\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        query: { logs: logs ? \"1\" : \"0\" },\n                        path: `/requests/${requestId}/status`,\n                    }),\n                    config,\n                    options: {\n                        signal: abortSignal,\n                        retry: QUEUE_STATUS_RETRY_CONFIG,\n                    },\n                });\n            });\n        },\n        streamStatus(endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function* (endpointId, { requestId, logs = false, connectionMode }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                const queryParams = {\n                    logs: logs ? \"1\" : \"0\",\n                };\n                const url = (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                    subdomain: \"queue\",\n                    path: `/requests/${requestId}/status/stream`,\n                    query: queryParams,\n                });\n                return new streaming_1.FalStream(endpointId, config, {\n                    url,\n                    method: \"get\",\n                    connectionMode,\n                    queryParams,\n                });\n            });\n        },\n        subscribeToStatus(endpointId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const requestId = options.requestId;\n                const timeout = options.timeout;\n                let timeoutId = undefined;\n                const handleCancelError = () => {\n                    // Ignore errors as the client will follow through with the timeout\n                    // regardless of the server response. In case cancelation fails, we\n                    // still want to reject the promise and consider the client call canceled.\n                };\n                if (options.mode === \"streaming\") {\n                    const status = yield ref.streamStatus(endpointId, {\n                        requestId,\n                        logs: options.logs,\n                        connectionMode: \"connectionMode\" in options\n                            ? options.connectionMode\n                            : undefined,\n                    });\n                    const logs = [];\n                    if (timeout) {\n                        timeoutId = setTimeout(() => {\n                            status.abort();\n                            ref.cancel(endpointId, { requestId }).catch(handleCancelError);\n                            // TODO this error cannot bubble up to the user since it's thrown in\n                            // a closure in the global scope due to setTimeout behavior.\n                            // User will get a platform error instead. We should find a way to\n                            // make this behavior aligned with polling.\n                            throw new Error(`Client timed out waiting for the request to complete after ${timeout}ms`);\n                        }, timeout);\n                    }\n                    status.on(\"data\", (data) => {\n                        if (options.onQueueUpdate) {\n                            // accumulate logs to match previous polling behavior\n                            if (\"logs\" in data &&\n                                Array.isArray(data.logs) &&\n                                data.logs.length > 0) {\n                                logs.push(...data.logs);\n                            }\n                            options.onQueueUpdate(\"logs\" in data ? Object.assign(Object.assign({}, data), { logs }) : data);\n                        }\n                    });\n                    const doneStatus = yield status.done();\n                    if (timeoutId) {\n                        clearTimeout(timeoutId);\n                    }\n                    return doneStatus;\n                }\n                // default to polling until status streaming is stable and faster\n                return new Promise((resolve, reject) => {\n                    var _a;\n                    let pollingTimeoutId;\n                    // type resolution isn't great in this case, so check for its presence\n                    // and and type so the typechecker behaves as expected\n                    const pollInterval = \"pollInterval\" in options && typeof options.pollInterval === \"number\"\n                        ? ((_a = options.pollInterval) !== null && _a !== void 0 ? _a : DEFAULT_POLL_INTERVAL)\n                        : DEFAULT_POLL_INTERVAL;\n                    const clearScheduledTasks = () => {\n                        if (timeoutId) {\n                            clearTimeout(timeoutId);\n                        }\n                        if (pollingTimeoutId) {\n                            clearTimeout(pollingTimeoutId);\n                        }\n                    };\n                    if (timeout) {\n                        timeoutId = setTimeout(() => {\n                            clearScheduledTasks();\n                            ref.cancel(endpointId, { requestId }).catch(handleCancelError);\n                            reject(new Error(`Client timed out waiting for the request to complete after ${timeout}ms`));\n                        }, timeout);\n                    }\n                    const poll = () => __awaiter(this, void 0, void 0, function* () {\n                        var _a;\n                        try {\n                            const requestStatus = yield ref.status(endpointId, {\n                                requestId,\n                                logs: (_a = options.logs) !== null && _a !== void 0 ? _a : false,\n                                abortSignal: options.abortSignal,\n                            });\n                            if (options.onQueueUpdate) {\n                                options.onQueueUpdate(requestStatus);\n                            }\n                            if (requestStatus.status === \"COMPLETED\") {\n                                clearScheduledTasks();\n                                resolve(requestStatus);\n                                return;\n                            }\n                            pollingTimeoutId = setTimeout(poll, pollInterval);\n                        }\n                        catch (error) {\n                            clearScheduledTasks();\n                            reject(error);\n                        }\n                    });\n                    poll().catch(reject);\n                });\n            });\n        },\n        result(endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function* (endpointId, { requestId, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                return (0, request_1.dispatchRequest)({\n                    method: \"get\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        path: `/requests/${requestId}`,\n                    }),\n                    config: Object.assign(Object.assign({}, config), { responseHandler: response_1.resultResponseHandler }),\n                    options: {\n                        signal: abortSignal,\n                        retry: QUEUE_RETRY_CONFIG,\n                    },\n                });\n            });\n        },\n        cancel(endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function* (endpointId, { requestId, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                yield (0, request_1.dispatchRequest)({\n                    method: \"put\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        path: `/requests/${requestId}/cancel`,\n                    }),\n                    config,\n                    options: {\n                        signal: abortSignal,\n                    },\n                });\n            });\n        },\n    };\n    return ref;\n};\nexports.createQueueClient = createQueueClient;\n//# sourceMappingURL=queue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/queue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/realtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/realtime.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createRealtimeClient = createRealtimeClient;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst msgpack_1 = __webpack_require__(/*! @msgpack/msgpack */ \"(rsc)/./node_modules/@msgpack/msgpack/dist.esm/index.mjs\");\nconst robot3_1 = __webpack_require__(/*! robot3 */ \"(rsc)/./node_modules/robot3/dist/machine.js\");\nconst auth_1 = __webpack_require__(/*! ./auth */ \"(rsc)/./node_modules/@fal-ai/client/src/auth.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst initialState = () => ({\n    enqueuedMessage: undefined,\n});\nfunction hasToken(context) {\n    return context.token !== undefined;\n}\nfunction noToken(context) {\n    return !hasToken(context);\n}\nfunction enqueueMessage(context, event) {\n    return Object.assign(Object.assign({}, context), { enqueuedMessage: event.message });\n}\nfunction closeConnection(context) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        context.websocket.close();\n    }\n    return Object.assign(Object.assign({}, context), { websocket: undefined });\n}\nfunction sendMessage(context, event) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        if (event.message instanceof Uint8Array) {\n            context.websocket.send(event.message);\n        }\n        else {\n            context.websocket.send((0, msgpack_1.encode)(event.message));\n        }\n        return Object.assign(Object.assign({}, context), { enqueuedMessage: undefined });\n    }\n    return Object.assign(Object.assign({}, context), { enqueuedMessage: event.message });\n}\nfunction expireToken(context) {\n    return Object.assign(Object.assign({}, context), { token: undefined });\n}\nfunction setToken(context, event) {\n    return Object.assign(Object.assign({}, context), { token: event.token });\n}\nfunction connectionEstablished(context, event) {\n    return Object.assign(Object.assign({}, context), { websocket: event.websocket });\n}\n// State machine\nconst connectionStateMachine = (0, robot3_1.createMachine)(\"idle\", {\n    idle: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"expireToken\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    connecting: (0, robot3_1.state)((0, robot3_1.transition)(\"connecting\", \"connecting\"), (0, robot3_1.transition)(\"connected\", \"active\", (0, robot3_1.reduce)(connectionEstablished)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.immediate)(\"authRequired\", (0, robot3_1.guard)(noToken))),\n    authRequired: (0, robot3_1.state)((0, robot3_1.transition)(\"initiateAuth\", \"authInProgress\"), (0, robot3_1.transition)(\"send\", \"authRequired\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    authInProgress: (0, robot3_1.state)((0, robot3_1.transition)(\"authenticated\", \"connecting\", (0, robot3_1.reduce)(setToken)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken), (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"authInProgress\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    active: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"active\", (0, robot3_1.reduce)(sendMessage)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    failed: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"failed\"), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n}, initialState);\nfunction buildRealtimeUrl(app, { token, maxBuffering }) {\n    if (maxBuffering !== undefined && (maxBuffering < 1 || maxBuffering > 60)) {\n        throw new Error(\"The `maxBuffering` must be between 1 and 60 (inclusive)\");\n    }\n    const queryParams = new URLSearchParams({\n        fal_jwt_token: token,\n    });\n    if (maxBuffering !== undefined) {\n        queryParams.set(\"max_buffering\", maxBuffering.toFixed(0));\n    }\n    const appId = (0, utils_1.ensureEndpointIdFormat)(app);\n    return `wss://fal.run/${appId}/realtime?${queryParams.toString()}`;\n}\nconst DEFAULT_THROTTLE_INTERVAL = 128;\nfunction isUnauthorizedError(message) {\n    // TODO we need better protocol definition with error codes\n    return message[\"status\"] === \"error\" && message[\"error\"] === \"Unauthorized\";\n}\n/**\n * See https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n */\nconst WebSocketErrorCodes = {\n    NORMAL_CLOSURE: 1000,\n    GOING_AWAY: 1001,\n};\nconst connectionCache = new Map();\nconst connectionCallbacks = new Map();\nfunction reuseInterpreter(key, throttleInterval, onChange) {\n    if (!connectionCache.has(key)) {\n        const machine = (0, robot3_1.interpret)(connectionStateMachine, onChange);\n        connectionCache.set(key, Object.assign(Object.assign({}, machine), { throttledSend: throttleInterval > 0\n                ? (0, utils_1.throttle)(machine.send, throttleInterval, true)\n                : machine.send }));\n    }\n    return connectionCache.get(key);\n}\nconst noop = () => {\n    /* No-op */\n};\n/**\n * A no-op connection that does not send any message.\n * Useful on the frameworks that reuse code for both ssr and csr (e.g. Next)\n * so the call when doing ssr has no side-effects.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NoOpConnection = {\n    send: noop,\n    close: noop,\n};\nfunction isSuccessfulResult(data) {\n    return (data.status !== \"error\" &&\n        data.type !== \"x-fal-message\" &&\n        !isFalErrorResult(data));\n}\nfunction isFalErrorResult(data) {\n    return data.type === \"x-fal-error\";\n}\nfunction createRealtimeClient({ config, }) {\n    return {\n        connect(app, handler) {\n            const { \n            // if running on React in the server, set clientOnly to true by default\n            clientOnly = (0, utils_1.isReact)() && !(0, runtime_1.isBrowser)(), connectionKey = crypto.randomUUID(), maxBuffering, throttleInterval = DEFAULT_THROTTLE_INTERVAL, } = handler;\n            if (clientOnly && !(0, runtime_1.isBrowser)()) {\n                return NoOpConnection;\n            }\n            let previousState;\n            // Although the state machine is cached so we don't open multiple connections,\n            // we still need to update the callbacks so we can call the correct references\n            // when the state machine is reused. This is needed because the callbacks\n            // are passed as part of the handler object, which can be different across\n            // different calls to `connect`.\n            connectionCallbacks.set(connectionKey, {\n                onError: handler.onError,\n                onResult: handler.onResult,\n            });\n            const getCallbacks = () => connectionCallbacks.get(connectionKey);\n            const stateMachine = reuseInterpreter(connectionKey, throttleInterval, ({ context, machine, send }) => {\n                const { enqueuedMessage, token } = context;\n                if (machine.current === \"active\" && enqueuedMessage) {\n                    send({ type: \"send\", message: enqueuedMessage });\n                }\n                if (machine.current === \"authRequired\" &&\n                    token === undefined &&\n                    previousState !== machine.current) {\n                    send({ type: \"initiateAuth\" });\n                    (0, auth_1.getTemporaryAuthToken)(app, config)\n                        .then((token) => {\n                        send({ type: \"authenticated\", token });\n                        const tokenExpirationTimeout = Math.round(auth_1.TOKEN_EXPIRATION_SECONDS * 0.9 * 1000);\n                        setTimeout(() => {\n                            send({ type: \"expireToken\" });\n                        }, tokenExpirationTimeout);\n                    })\n                        .catch((error) => {\n                        send({ type: \"unauthorized\", error });\n                    });\n                }\n                if (machine.current === \"connecting\" &&\n                    previousState !== machine.current &&\n                    token !== undefined) {\n                    const ws = new WebSocket(buildRealtimeUrl(app, { token, maxBuffering }));\n                    ws.onopen = () => {\n                        send({ type: \"connected\", websocket: ws });\n                    };\n                    ws.onclose = (event) => {\n                        if (event.code !== WebSocketErrorCodes.NORMAL_CLOSURE) {\n                            const { onError = noop } = getCallbacks();\n                            onError(new response_1.ApiError({\n                                message: `Error closing the connection: ${event.reason}`,\n                                status: event.code,\n                            }));\n                        }\n                        send({ type: \"connectionClosed\", code: event.code });\n                    };\n                    ws.onerror = (event) => {\n                        // TODO specify error protocol for identified errors\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({ message: \"Unknown error\", status: 500 }));\n                    };\n                    ws.onmessage = (event) => {\n                        const { onResult } = getCallbacks();\n                        // Handle binary messages as msgpack messages\n                        if (event.data instanceof ArrayBuffer) {\n                            const result = (0, msgpack_1.decode)(new Uint8Array(event.data));\n                            onResult(result);\n                            return;\n                        }\n                        if (event.data instanceof Uint8Array) {\n                            const result = (0, msgpack_1.decode)(event.data);\n                            onResult(result);\n                            return;\n                        }\n                        if (event.data instanceof Blob) {\n                            event.data.arrayBuffer().then((buffer) => {\n                                const result = (0, msgpack_1.decode)(new Uint8Array(buffer));\n                                onResult(result);\n                            });\n                            return;\n                        }\n                        // Otherwise handle strings as plain JSON messages\n                        const data = JSON.parse(event.data);\n                        // Drop messages that are not related to the actual result.\n                        // In the future, we might want to handle other types of messages.\n                        // TODO: specify the fal ws protocol format\n                        if (isUnauthorizedError(data)) {\n                            send({\n                                type: \"unauthorized\",\n                                error: new Error(\"Unauthorized\"),\n                            });\n                            return;\n                        }\n                        if (isSuccessfulResult(data)) {\n                            onResult(data);\n                            return;\n                        }\n                        if (isFalErrorResult(data)) {\n                            if (data.error === \"TIMEOUT\") {\n                                // Timeout error messages just indicate that the connection hasn't\n                                // received an incoming message for a while. We don't need to\n                                // handle them as errors.\n                                return;\n                            }\n                            const { onError = noop } = getCallbacks();\n                            onError(new response_1.ApiError({\n                                message: `${data.error}: ${data.reason}`,\n                                // TODO better error status code\n                                status: 400,\n                                body: data,\n                            }));\n                            return;\n                        }\n                    };\n                }\n                previousState = machine.current;\n            });\n            const send = (input) => {\n                // Use throttled send to avoid sending too many messages\n                stateMachine.throttledSend({\n                    type: \"send\",\n                    message: input,\n                });\n            };\n            const close = () => {\n                stateMachine.send({ type: \"close\" });\n            };\n            return {\n                send,\n                close,\n            };\n        },\n    };\n}\n//# sourceMappingURL=realtime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/realtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/request.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/request.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dispatchRequest = dispatchRequest;\nexports.buildUrl = buildUrl;\nconst retry_1 = __webpack_require__(/*! ./retry */ \"(rsc)/./node_modules/@fal-ai/client/src/retry.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst isCloudflareWorkers = typeof navigator !== \"undefined\" &&\n    (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === \"Cloudflare-Workers\";\nfunction dispatchRequest(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        const { targetUrl, input, config, options = {} } = params;\n        const { credentials: credentialsValue, requestMiddleware, responseHandler, fetch, } = config;\n        const retryOptions = Object.assign(Object.assign({}, config.retry), (options.retry || {}));\n        const executeRequest = () => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c;\n            const userAgent = (0, runtime_1.isBrowser)() ? {} : { \"User-Agent\": (0, runtime_1.getUserAgent)() };\n            const credentials = typeof credentialsValue === \"function\"\n                ? credentialsValue()\n                : credentialsValue;\n            const { method, url, headers } = yield requestMiddleware({\n                method: ((_b = (_a = params.method) !== null && _a !== void 0 ? _a : options.method) !== null && _b !== void 0 ? _b : \"post\").toUpperCase(),\n                url: targetUrl,\n                headers: params.headers,\n            });\n            const authHeader = credentials\n                ? { Authorization: `Key ${credentials}` }\n                : {};\n            const requestHeaders = Object.assign(Object.assign(Object.assign(Object.assign({}, authHeader), { Accept: \"application/json\", \"Content-Type\": \"application/json\" }), userAgent), (headers !== null && headers !== void 0 ? headers : {}));\n            const { responseHandler: customResponseHandler, retry: _ } = options, requestInit = __rest(options, [\"responseHandler\", \"retry\"]);\n            const response = yield fetch(url, Object.assign(Object.assign(Object.assign(Object.assign({}, requestInit), { method, headers: Object.assign(Object.assign({}, requestHeaders), ((_c = requestInit.headers) !== null && _c !== void 0 ? _c : {})) }), (!isCloudflareWorkers && { mode: \"cors\" })), { signal: options.signal, body: method.toLowerCase() !== \"get\" && input\n                    ? JSON.stringify(input)\n                    : undefined }));\n            const handleResponse = customResponseHandler !== null && customResponseHandler !== void 0 ? customResponseHandler : responseHandler;\n            return yield handleResponse(response);\n        });\n        let lastError;\n        for (let attempt = 0; attempt <= retryOptions.maxRetries; attempt++) {\n            try {\n                return yield executeRequest();\n            }\n            catch (error) {\n                lastError = error;\n                const shouldNotRetry = attempt === retryOptions.maxRetries ||\n                    !(0, retry_1.isRetryableError)(error, retryOptions.retryableStatusCodes) ||\n                    ((_a = options.signal) === null || _a === void 0 ? void 0 : _a.aborted);\n                if (shouldNotRetry) {\n                    throw error;\n                }\n                const delay = (0, retry_1.calculateBackoffDelay)(attempt, retryOptions.baseDelay, retryOptions.maxDelay, retryOptions.backoffMultiplier, retryOptions.enableJitter);\n                yield (0, utils_1.sleep)(delay);\n            }\n        }\n        throw lastError;\n    });\n}\n/**\n * Builds the final url to run the function based on its `id` or alias and\n * a the options from `RunOptions<Input>`.\n *\n * @private\n * @param id the function id or alias\n * @param options the run options\n * @returns the final url to run the function\n */\nfunction buildUrl(id, options = {}) {\n    var _a, _b;\n    const method = ((_a = options.method) !== null && _a !== void 0 ? _a : \"post\").toLowerCase();\n    const path = ((_b = options.path) !== null && _b !== void 0 ? _b : \"\").replace(/^\\//, \"\").replace(/\\/{2,}/, \"/\");\n    const input = options.input;\n    const params = Object.assign(Object.assign({}, (options.query || {})), (method === \"get\" ? input : {}));\n    const queryParams = Object.keys(params).length > 0\n        ? `?${new URLSearchParams(params).toString()}`\n        : \"\";\n    // if a fal url is passed, just use it\n    if ((0, utils_1.isValidUrl)(id)) {\n        const url = id.endsWith(\"/\") ? id : `${id}/`;\n        return `${url}${path}${queryParams}`;\n    }\n    const appId = (0, utils_1.ensureEndpointIdFormat)(id);\n    const subdomain = options.subdomain ? `${options.subdomain}.` : \"\";\n    const url = `https://${subdomain}fal.run/${appId}/${path}`;\n    return `${url.replace(/\\/$/, \"\")}${queryParams}`;\n}\n//# sourceMappingURL=request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/response.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/response.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidationError = exports.ApiError = void 0;\nexports.defaultResponseHandler = defaultResponseHandler;\nexports.resultResponseHandler = resultResponseHandler;\nconst REQUEST_ID_HEADER = \"x-fal-request-id\";\nclass ApiError extends Error {\n    constructor({ message, status, body }) {\n        super(message);\n        this.name = \"ApiError\";\n        this.status = status;\n        this.body = body;\n    }\n}\nexports.ApiError = ApiError;\nclass ValidationError extends ApiError {\n    constructor(args) {\n        super(args);\n        this.name = \"ValidationError\";\n    }\n    get fieldErrors() {\n        // NOTE: this is a hack to support both FastAPI/Pydantic errors\n        // and some custom 422 errors that might not be in the Pydantic format.\n        if (typeof this.body.detail === \"string\") {\n            return [\n                {\n                    loc: [\"body\"],\n                    msg: this.body.detail,\n                    type: \"value_error\",\n                },\n            ];\n        }\n        return this.body.detail || [];\n    }\n    getFieldErrors(field) {\n        return this.fieldErrors.filter((error) => error.loc[error.loc.length - 1] === field);\n    }\n}\nexports.ValidationError = ValidationError;\nfunction defaultResponseHandler(response) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        const { status, statusText } = response;\n        const contentType = (_a = response.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"\";\n        if (!response.ok) {\n            if (contentType.includes(\"application/json\")) {\n                const body = yield response.json();\n                const ErrorType = status === 422 ? ValidationError : ApiError;\n                throw new ErrorType({\n                    message: body.message || statusText,\n                    status,\n                    body,\n                });\n            }\n            throw new ApiError({ message: `HTTP ${status}: ${statusText}`, status });\n        }\n        if (contentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        if (contentType.includes(\"text/html\")) {\n            return response.text();\n        }\n        if (contentType.includes(\"application/octet-stream\")) {\n            return response.arrayBuffer();\n        }\n        // TODO convert to either number or bool automatically\n        return response.text();\n    });\n}\nfunction resultResponseHandler(response) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = yield defaultResponseHandler(response);\n        return {\n            data,\n            requestId: response.headers.get(REQUEST_ID_HEADER) || \"\",\n        };\n    });\n}\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3Jlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxnQkFBZ0I7QUFDMUMsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUNBQWlDLGlCQUFpQixPQUFPLElBQUksV0FBVyxXQUFXO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWFuL2Z1dHVyZS9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3Jlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQXBpRXJyb3IgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRSZXNwb25zZUhhbmRsZXIgPSBkZWZhdWx0UmVzcG9uc2VIYW5kbGVyO1xuZXhwb3J0cy5yZXN1bHRSZXNwb25zZUhhbmRsZXIgPSByZXN1bHRSZXNwb25zZUhhbmRsZXI7XG5jb25zdCBSRVFVRVNUX0lEX0hFQURFUiA9IFwieC1mYWwtcmVxdWVzdC1pZFwiO1xuY2xhc3MgQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtZXNzYWdlLCBzdGF0dXMsIGJvZHkgfSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBcGlFcnJvclwiO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB9XG59XG5leHBvcnRzLkFwaUVycm9yID0gQXBpRXJyb3I7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBBcGlFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJWYWxpZGF0aW9uRXJyb3JcIjtcbiAgICB9XG4gICAgZ2V0IGZpZWxkRXJyb3JzKCkge1xuICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIGEgaGFjayB0byBzdXBwb3J0IGJvdGggRmFzdEFQSS9QeWRhbnRpYyBlcnJvcnNcbiAgICAgICAgLy8gYW5kIHNvbWUgY3VzdG9tIDQyMiBlcnJvcnMgdGhhdCBtaWdodCBub3QgYmUgaW4gdGhlIFB5ZGFudGljIGZvcm1hdC5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJvZHkuZGV0YWlsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jOiBbXCJib2R5XCJdLFxuICAgICAgICAgICAgICAgICAgICBtc2c6IHRoaXMuYm9keS5kZXRhaWwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidmFsdWVfZXJyb3JcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ib2R5LmRldGFpbCB8fCBbXTtcbiAgICB9XG4gICAgZ2V0RmllbGRFcnJvcnMoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRFcnJvcnMuZmlsdGVyKChlcnJvcikgPT4gZXJyb3IubG9jW2Vycm9yLmxvYy5sZW5ndGggLSAxXSA9PT0gZmllbGQpO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gVmFsaWRhdGlvbkVycm9yO1xuZnVuY3Rpb24gZGVmYXVsdFJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIHN0YXR1c1RleHQgfSA9IHJlc3BvbnNlO1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IChfYSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBpZiAoY29udGVudFR5cGUuaW5jbHVkZXMoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBFcnJvclR5cGUgPSBzdGF0dXMgPT09IDQyMiA/IFZhbGlkYXRpb25FcnJvciA6IEFwaUVycm9yO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvclR5cGUoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBib2R5Lm1lc3NhZ2UgfHwgc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKHsgbWVzc2FnZTogYEhUVFAgJHtzdGF0dXN9OiAke3N0YXR1c1RleHR9YCwgc3RhdHVzIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcyhcImFwcGxpY2F0aW9uL2pzb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlLmluY2x1ZGVzKFwidGV4dC9odG1sXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcyhcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETyBjb252ZXJ0IHRvIGVpdGhlciBudW1iZXIgb3IgYm9vbCBhdXRvbWF0aWNhbGx5XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXN1bHRSZXNwb25zZUhhbmRsZXIocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBkYXRhID0geWllbGQgZGVmYXVsdFJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXNwb25zZS5oZWFkZXJzLmdldChSRVFVRVNUX0lEX0hFQURFUikgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/retry.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/retry.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_RETRY_OPTIONS = exports.DEFAULT_RETRYABLE_STATUS_CODES = void 0;\nexports.isRetryableError = isRetryableError;\nexports.calculateBackoffDelay = calculateBackoffDelay;\nexports.executeWithRetry = executeWithRetry;\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\n/**\n * Base retryable status codes for most requests\n */\nexports.DEFAULT_RETRYABLE_STATUS_CODES = [429, 502, 503, 504];\nexports.DEFAULT_RETRY_OPTIONS = {\n    maxRetries: 3,\n    baseDelay: 1000,\n    maxDelay: 30000,\n    backoffMultiplier: 2,\n    retryableStatusCodes: exports.DEFAULT_RETRYABLE_STATUS_CODES,\n    enableJitter: true,\n};\n/**\n * Determines if an error is retryable based on the status code\n */\nfunction isRetryableError(error, retryableStatusCodes) {\n    return (error instanceof response_1.ApiError && retryableStatusCodes.includes(error.status));\n}\n/**\n * Calculates the backoff delay for a given attempt using exponential backoff\n */\nfunction calculateBackoffDelay(attempt, baseDelay, maxDelay, backoffMultiplier, enableJitter) {\n    const exponentialDelay = Math.min(baseDelay * Math.pow(backoffMultiplier, attempt), maxDelay);\n    if (enableJitter) {\n        // Add ±25% jitter to prevent thundering herd\n        const jitter = 0.25 * exponentialDelay * (Math.random() * 2 - 1);\n        return Math.max(0, exponentialDelay + jitter);\n    }\n    return exponentialDelay;\n}\n/**\n * Executes an operation with retry logic and returns both result and metrics\n */\nfunction executeWithRetry(operation, options, onRetry) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const metrics = {\n            totalAttempts: 0,\n            totalDelay: 0,\n        };\n        let lastError;\n        for (let attempt = 0; attempt <= options.maxRetries; attempt++) {\n            metrics.totalAttempts++;\n            try {\n                const result = yield operation();\n                return { result, metrics };\n            }\n            catch (error) {\n                lastError = error;\n                metrics.lastError = error;\n                if (attempt === options.maxRetries ||\n                    !isRetryableError(error, options.retryableStatusCodes)) {\n                    throw error;\n                }\n                const delay = calculateBackoffDelay(attempt, options.baseDelay, options.maxDelay, options.backoffMultiplier, options.enableJitter);\n                metrics.totalDelay += delay;\n                if (onRetry) {\n                    onRetry(attempt + 1, error, delay);\n                }\n                yield (0, utils_1.sleep)(delay);\n            }\n        }\n        throw lastError;\n    });\n}\n//# sourceMappingURL=retry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3JldHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyxzQ0FBc0M7QUFDdEUsd0JBQXdCO0FBQ3hCLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIsbUJBQW1CLG1CQUFPLENBQUMsdUVBQVk7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLCtCQUErQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvc2Vhbi9mdXR1cmUvbm9kZV9tb2R1bGVzL0BmYWwtYWkvY2xpZW50L3NyYy9yZXRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX1JFVFJZX09QVElPTlMgPSBleHBvcnRzLkRFRkFVTFRfUkVUUllBQkxFX1NUQVRVU19DT0RFUyA9IHZvaWQgMDtcbmV4cG9ydHMuaXNSZXRyeWFibGVFcnJvciA9IGlzUmV0cnlhYmxlRXJyb3I7XG5leHBvcnRzLmNhbGN1bGF0ZUJhY2tvZmZEZWxheSA9IGNhbGN1bGF0ZUJhY2tvZmZEZWxheTtcbmV4cG9ydHMuZXhlY3V0ZVdpdGhSZXRyeSA9IGV4ZWN1dGVXaXRoUmV0cnk7XG5jb25zdCByZXNwb25zZV8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2VcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKipcbiAqIEJhc2UgcmV0cnlhYmxlIHN0YXR1cyBjb2RlcyBmb3IgbW9zdCByZXF1ZXN0c1xuICovXG5leHBvcnRzLkRFRkFVTFRfUkVUUllBQkxFX1NUQVRVU19DT0RFUyA9IFs0MjksIDUwMiwgNTAzLCA1MDRdO1xuZXhwb3J0cy5ERUZBVUxUX1JFVFJZX09QVElPTlMgPSB7XG4gICAgbWF4UmV0cmllczogMyxcbiAgICBiYXNlRGVsYXk6IDEwMDAsXG4gICAgbWF4RGVsYXk6IDMwMDAwLFxuICAgIGJhY2tvZmZNdWx0aXBsaWVyOiAyLFxuICAgIHJldHJ5YWJsZVN0YXR1c0NvZGVzOiBleHBvcnRzLkRFRkFVTFRfUkVUUllBQkxFX1NUQVRVU19DT0RFUyxcbiAgICBlbmFibGVKaXR0ZXI6IHRydWUsXG59O1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVycm9yIGlzIHJldHJ5YWJsZSBiYXNlZCBvbiB0aGUgc3RhdHVzIGNvZGVcbiAqL1xuZnVuY3Rpb24gaXNSZXRyeWFibGVFcnJvcihlcnJvciwgcmV0cnlhYmxlU3RhdHVzQ29kZXMpIHtcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgcmVzcG9uc2VfMS5BcGlFcnJvciAmJiByZXRyeWFibGVTdGF0dXNDb2Rlcy5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYmFja29mZiBkZWxheSBmb3IgYSBnaXZlbiBhdHRlbXB0IHVzaW5nIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQmFja29mZkRlbGF5KGF0dGVtcHQsIGJhc2VEZWxheSwgbWF4RGVsYXksIGJhY2tvZmZNdWx0aXBsaWVyLCBlbmFibGVKaXR0ZXIpIHtcbiAgICBjb25zdCBleHBvbmVudGlhbERlbGF5ID0gTWF0aC5taW4oYmFzZURlbGF5ICogTWF0aC5wb3coYmFja29mZk11bHRpcGxpZXIsIGF0dGVtcHQpLCBtYXhEZWxheSk7XG4gICAgaWYgKGVuYWJsZUppdHRlcikge1xuICAgICAgICAvLyBBZGQgwrEyNSUgaml0dGVyIHRvIHByZXZlbnQgdGh1bmRlcmluZyBoZXJkXG4gICAgICAgIGNvbnN0IGppdHRlciA9IDAuMjUgKiBleHBvbmVudGlhbERlbGF5ICogKE1hdGgucmFuZG9tKCkgKiAyIC0gMSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudGlhbERlbGF5ICsgaml0dGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cG9uZW50aWFsRGVsYXk7XG59XG4vKipcbiAqIEV4ZWN1dGVzIGFuIG9wZXJhdGlvbiB3aXRoIHJldHJ5IGxvZ2ljIGFuZCByZXR1cm5zIGJvdGggcmVzdWx0IGFuZCBtZXRyaWNzXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVXaXRoUmV0cnkob3BlcmF0aW9uLCBvcHRpb25zLCBvblJldHJ5KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHtcbiAgICAgICAgICAgIHRvdGFsQXR0ZW1wdHM6IDAsXG4gICAgICAgICAgICB0b3RhbERlbGF5OiAwLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgbGFzdEVycm9yO1xuICAgICAgICBmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8PSBvcHRpb25zLm1heFJldHJpZXM7IGF0dGVtcHQrKykge1xuICAgICAgICAgICAgbWV0cmljcy50b3RhbEF0dGVtcHRzKys7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIG9wZXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdCwgbWV0cmljcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgbWV0cmljcy5sYXN0RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ZW1wdCA9PT0gb3B0aW9ucy5tYXhSZXRyaWVzIHx8XG4gICAgICAgICAgICAgICAgICAgICFpc1JldHJ5YWJsZUVycm9yKGVycm9yLCBvcHRpb25zLnJldHJ5YWJsZVN0YXR1c0NvZGVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXkgPSBjYWxjdWxhdGVCYWNrb2ZmRGVsYXkoYXR0ZW1wdCwgb3B0aW9ucy5iYXNlRGVsYXksIG9wdGlvbnMubWF4RGVsYXksIG9wdGlvbnMuYmFja29mZk11bHRpcGxpZXIsIG9wdGlvbnMuZW5hYmxlSml0dGVyKTtcbiAgICAgICAgICAgICAgICBtZXRyaWNzLnRvdGFsRGVsYXkgKz0gZGVsYXk7XG4gICAgICAgICAgICAgICAgaWYgKG9uUmV0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25SZXRyeShhdHRlbXB0ICsgMSwgZXJyb3IsIGRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQgKDAsIHV0aWxzXzEuc2xlZXApKGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBsYXN0RXJyb3I7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/retry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/runtime.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/runtime.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable @typescript-eslint/no-var-requires */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBrowser = isBrowser;\nexports.getUserAgent = getUserAgent;\nfunction isBrowser() {\n    return (typeof window !== \"undefined\" && typeof window.document !== \"undefined\");\n}\nlet memoizedUserAgent = null;\nfunction getUserAgent() {\n    if (memoizedUserAgent !== null) {\n        return memoizedUserAgent;\n    }\n    const packageInfo = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@fal-ai/client/package.json\");\n    memoizedUserAgent = `${packageInfo.name}/${packageInfo.version}`;\n    return memoizedUserAgent;\n}\n//# sourceMappingURL=runtime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3J1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDakQsMkJBQTJCLGlCQUFpQixHQUFHLG9CQUFvQjtBQUNuRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWFuL2Z1dHVyZS9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3J1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3NlcjtcbmV4cG9ydHMuZ2V0VXNlckFnZW50ID0gZ2V0VXNlckFnZW50O1xuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIHJldHVybiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmxldCBtZW1vaXplZFVzZXJBZ2VudCA9IG51bGw7XG5mdW5jdGlvbiBnZXRVc2VyQWdlbnQoKSB7XG4gICAgaWYgKG1lbW9pemVkVXNlckFnZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBtZW1vaXplZFVzZXJBZ2VudDtcbiAgICB9XG4gICAgY29uc3QgcGFja2FnZUluZm8gPSByZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpO1xuICAgIG1lbW9pemVkVXNlckFnZW50ID0gYCR7cGFja2FnZUluZm8ubmFtZX0vJHtwYWNrYWdlSW5mby52ZXJzaW9ufWA7XG4gICAgcmV0dXJuIG1lbW9pemVkVXNlckFnZW50O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/storage.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/storage.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createStorageClient = createStorageClient;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */\nfunction getExtensionFromContentType(contentType) {\n    var _a;\n    const [_, fileType] = contentType.split(\"/\");\n    return (_a = fileType.split(/[-;]/)[0]) !== null && _a !== void 0 ? _a : \"bin\";\n}\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n */\nfunction initiateUpload(file, config, contentType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            // NOTE: We want to test V3 without making it the default at the API level\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate?storage_type=fal-cdn-v3`,\n            input: {\n                content_type: contentType,\n                file_name: filename,\n            },\n            config,\n        });\n    });\n}\n/**\n * Initiate the multipart upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n */\nfunction initiateMultipartUpload(file, config, contentType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate-multipart?storage_type=fal-cdn-v3`,\n            input: {\n                content_type: contentType,\n                file_name: filename,\n            },\n            config,\n        });\n    });\n}\nfunction partUploadRetries(uploadUrl_1, chunk_1, config_2) {\n    return __awaiter(this, arguments, void 0, function* (uploadUrl, chunk, config, tries = 3) {\n        if (tries === 0) {\n            throw new Error(\"Part upload failed, retries exhausted\");\n        }\n        const { fetch, responseHandler } = config;\n        try {\n            const response = yield fetch(uploadUrl, {\n                method: \"PUT\",\n                body: chunk,\n            });\n            return (yield responseHandler(response));\n        }\n        catch (error) {\n            return yield partUploadRetries(uploadUrl, chunk, config, tries - 1);\n        }\n    });\n}\nfunction multipartUpload(file, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { fetch, responseHandler } = config;\n        const contentType = file.type || \"application/octet-stream\";\n        const { upload_url: uploadUrl, file_url: url } = yield initiateMultipartUpload(file, config, contentType);\n        // Break the file into 10MB chunks\n        const chunkSize = 10 * 1024 * 1024;\n        const chunks = Math.ceil(file.size / chunkSize);\n        const parsedUrl = new URL(uploadUrl);\n        const responses = [];\n        for (let i = 0; i < chunks; i++) {\n            const start = i * chunkSize;\n            const end = Math.min(start + chunkSize, file.size);\n            const chunk = file.slice(start, end);\n            const partNumber = i + 1;\n            // {uploadUrl}/{part_number}?uploadUrlParams=...\n            const partUploadUrl = `${parsedUrl.origin}${parsedUrl.pathname}/${partNumber}${parsedUrl.search}`;\n            responses.push(yield partUploadRetries(partUploadUrl, chunk, config));\n        }\n        // Complete the upload\n        const completeUrl = `${parsedUrl.origin}${parsedUrl.pathname}/complete${parsedUrl.search}`;\n        const response = yield fetch(completeUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                parts: responses.map((mpart) => ({\n                    partNumber: mpart.partNumber,\n                    etag: mpart.etag,\n                })),\n            }),\n        });\n        yield responseHandler(response);\n        return url;\n    });\n}\nfunction createStorageClient({ config, }) {\n    const ref = {\n        upload: (file) => __awaiter(this, void 0, void 0, function* () {\n            // Check for 90+ MB file size to do multipart upload\n            if (file.size > 90 * 1024 * 1024) {\n                return yield multipartUpload(file, config);\n            }\n            const contentType = file.type || \"application/octet-stream\";\n            const { fetch, responseHandler } = config;\n            const { upload_url: uploadUrl, file_url: url } = yield initiateUpload(file, config, contentType);\n            const response = yield fetch(uploadUrl, {\n                method: \"PUT\",\n                body: file,\n                headers: {\n                    \"Content-Type\": file.type || \"application/octet-stream\",\n                },\n            });\n            yield responseHandler(response);\n            return url;\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        transformInput: (input) => __awaiter(this, void 0, void 0, function* () {\n            if (Array.isArray(input)) {\n                return Promise.all(input.map((item) => ref.transformInput(item)));\n            }\n            else if (input instanceof Blob) {\n                return yield ref.upload(input);\n            }\n            else if ((0, utils_1.isPlainObject)(input)) {\n                const inputObject = input;\n                const promises = Object.entries(inputObject).map((_a) => __awaiter(this, [_a], void 0, function* ([key, value]) {\n                    return [key, yield ref.transformInput(value)];\n                }));\n                const results = yield Promise.all(promises);\n                return Object.fromEntries(results);\n            }\n            // Return the input as is if it's neither an object nor a file/blob/data URI\n            return input;\n        }),\n    };\n    return ref;\n}\n//# sourceMappingURL=storage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/streaming.js":
/*!******************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/streaming.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FalStream = void 0;\nexports.createStreamingClient = createStreamingClient;\nconst eventsource_parser_1 = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/eventsource-parser/dist/index.cjs\");\nconst auth_1 = __webpack_require__(/*! ./auth */ \"(rsc)/./node_modules/@fal-ai/client/src/auth.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst CONTENT_TYPE_EVENT_STREAM = \"text/event-stream\";\nconst EVENT_STREAM_TIMEOUT = 15 * 1000;\n/**\n * The class representing a streaming response. With t\n */\nclass FalStream {\n    constructor(endpointId, config, options) {\n        var _a;\n        // support for event listeners\n        this.listeners = new Map();\n        this.buffer = [];\n        // local state\n        this.currentData = undefined;\n        this.lastEventTimestamp = 0;\n        this.streamClosed = false;\n        this._requestId = null;\n        this.abortController = new AbortController();\n        this.start = () => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const { endpointId, options } = this;\n            const { input, method = \"post\", connectionMode = \"server\" } = options;\n            try {\n                if (connectionMode === \"client\") {\n                    // if we are in the browser, we need to get a temporary token\n                    // to authenticate the request\n                    const token = yield (0, auth_1.getTemporaryAuthToken)(endpointId, this.config);\n                    const { fetch } = this.config;\n                    const parsedUrl = new URL(this.url);\n                    parsedUrl.searchParams.set(\"fal_jwt_token\", token);\n                    const response = yield fetch(parsedUrl.toString(), {\n                        method: method.toUpperCase(),\n                        headers: {\n                            accept: (_a = options.accept) !== null && _a !== void 0 ? _a : CONTENT_TYPE_EVENT_STREAM,\n                            \"content-type\": \"application/json\",\n                        },\n                        body: input && method !== \"get\" ? JSON.stringify(input) : undefined,\n                        signal: this.abortController.signal,\n                    });\n                    this._requestId = response.headers.get(\"x-fal-request-id\");\n                    return yield this.handleResponse(response);\n                }\n                return yield (0, request_1.dispatchRequest)({\n                    method: method.toUpperCase(),\n                    targetUrl: this.url,\n                    input,\n                    config: this.config,\n                    options: {\n                        headers: {\n                            accept: (_b = options.accept) !== null && _b !== void 0 ? _b : CONTENT_TYPE_EVENT_STREAM,\n                        },\n                        responseHandler: (response) => __awaiter(this, void 0, void 0, function* () {\n                            this._requestId = response.headers.get(\"x-fal-request-id\");\n                            return yield this.handleResponse(response);\n                        }),\n                        signal: this.abortController.signal,\n                    },\n                });\n            }\n            catch (error) {\n                this.handleError(error);\n            }\n        });\n        this.handleResponse = (response) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            if (!response.ok) {\n                try {\n                    // we know the response failed, call the response handler\n                    // so the exception gets converted to ApiError correctly\n                    yield (0, response_1.defaultResponseHandler)(response);\n                }\n                catch (error) {\n                    this.emit(\"error\", error);\n                }\n                return;\n            }\n            const body = response.body;\n            if (!body) {\n                this.emit(\"error\", new response_1.ApiError({\n                    message: \"Response body is empty.\",\n                    status: 400,\n                    body: undefined,\n                }));\n                return;\n            }\n            const isEventStream = ((_a = response.headers.get(\"content-type\")) !== null && _a !== void 0 ? _a : \"\").startsWith(CONTENT_TYPE_EVENT_STREAM);\n            // any response that is not a text/event-stream will be handled as a binary stream\n            if (!isEventStream) {\n                const reader = body.getReader();\n                const emitRawChunk = () => {\n                    reader.read().then(({ done, value }) => {\n                        if (done) {\n                            this.emit(\"done\", this.currentData);\n                            return;\n                        }\n                        this.currentData = value;\n                        this.emit(\"data\", value);\n                        emitRawChunk();\n                    });\n                };\n                emitRawChunk();\n                return;\n            }\n            const decoder = new TextDecoder(\"utf-8\");\n            const reader = response.body.getReader();\n            const parser = (0, eventsource_parser_1.createParser)((event) => {\n                if (event.type === \"event\") {\n                    const data = event.data;\n                    try {\n                        const parsedData = JSON.parse(data);\n                        this.buffer.push(parsedData);\n                        this.currentData = parsedData;\n                        this.emit(\"data\", parsedData);\n                        // also emit 'message'for backwards compatibility\n                        this.emit(\"message\", parsedData);\n                    }\n                    catch (e) {\n                        this.emit(\"error\", e);\n                    }\n                }\n            });\n            const timeout = (_b = this.options.timeout) !== null && _b !== void 0 ? _b : EVENT_STREAM_TIMEOUT;\n            const readPartialResponse = () => __awaiter(this, void 0, void 0, function* () {\n                const { value, done } = yield reader.read();\n                this.lastEventTimestamp = Date.now();\n                parser.feed(decoder.decode(value));\n                if (Date.now() - this.lastEventTimestamp > timeout) {\n                    this.emit(\"error\", new response_1.ApiError({\n                        message: `Event stream timed out after ${(timeout / 1000).toFixed(0)} seconds with no messages.`,\n                        status: 408,\n                    }));\n                }\n                if (!done) {\n                    readPartialResponse().catch(this.handleError);\n                }\n                else {\n                    this.emit(\"done\", this.currentData);\n                }\n            });\n            readPartialResponse().catch(this.handleError);\n            return;\n        });\n        this.handleError = (error) => {\n            var _a;\n            // In case AbortError is thrown but the signal is marked as aborted\n            // it means the user called abort() and we should not emit an error\n            // as it's expected behavior\n            // See note on: https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\n            if (error.name === \"AbortError\" || this.signal.aborted) {\n                return;\n            }\n            const apiError = error instanceof response_1.ApiError\n                ? error\n                : new response_1.ApiError({\n                    message: (_a = error.message) !== null && _a !== void 0 ? _a : \"An unknown error occurred\",\n                    status: 500,\n                });\n            this.emit(\"error\", apiError);\n            return;\n        };\n        this.on = (type, listener) => {\n            var _a;\n            if (!this.listeners.has(type)) {\n                this.listeners.set(type, []);\n            }\n            (_a = this.listeners.get(type)) === null || _a === void 0 ? void 0 : _a.push(listener);\n        };\n        this.emit = (type, event) => {\n            const listeners = this.listeners.get(type) || [];\n            for (const listener of listeners) {\n                listener(event);\n            }\n        };\n        /**\n         * Gets a reference to the `Promise` that indicates whether the streaming\n         * is done or not. Developers should always call this in their apps to ensure\n         * the request is over.\n         *\n         * An alternative to this, is to use `on('done')` in case your application\n         * architecture works best with event listeners.\n         *\n         * @returns the promise that resolves when the request is done.\n         */\n        this.done = () => __awaiter(this, void 0, void 0, function* () { return this.donePromise; });\n        /**\n         * Aborts the streaming request.\n         *\n         * **Note:** This method is noop in case the request is already done.\n         *\n         * @param reason optional cause for aborting the request.\n         */\n        this.abort = (reason) => {\n            if (!this.streamClosed) {\n                this.abortController.abort(reason);\n            }\n        };\n        this.endpointId = endpointId;\n        this.config = config;\n        this.url =\n            (_a = options.url) !== null && _a !== void 0 ? _a : (0, request_1.buildUrl)(endpointId, {\n                path: \"/stream\",\n                query: options.queryParams,\n            });\n        this.options = options;\n        this.donePromise = new Promise((resolve, reject) => {\n            if (this.streamClosed) {\n                reject(new response_1.ApiError({\n                    message: \"Streaming connection is already closed.\",\n                    status: 400,\n                    body: undefined,\n                }));\n            }\n            this.signal.addEventListener(\"abort\", () => {\n                var _a;\n                resolve((_a = this.currentData) !== null && _a !== void 0 ? _a : {});\n            });\n            this.on(\"done\", (data) => {\n                this.streamClosed = true;\n                resolve(data);\n            });\n            this.on(\"error\", (error) => {\n                this.streamClosed = true;\n                reject(error);\n            });\n        });\n        // if a abort signal was passed, sync it with the internal one\n        if (options.signal) {\n            options.signal.addEventListener(\"abort\", () => {\n                this.abortController.abort();\n            });\n        }\n        // start the streaming request\n        this.start().catch(this.handleError);\n    }\n    [Symbol.asyncIterator]() {\n        return __asyncGenerator(this, arguments, function* _a() {\n            let running = true;\n            const stopAsyncIterator = () => (running = false);\n            this.on(\"error\", stopAsyncIterator);\n            this.on(\"done\", stopAsyncIterator);\n            while (running || this.buffer.length > 0) {\n                const data = this.buffer.shift();\n                if (data) {\n                    yield yield __await(data);\n                }\n                // the short timeout ensures the while loop doesn't block other\n                // frames getting executed concurrently\n                yield __await(new Promise((resolve) => setTimeout(resolve, 16)));\n            }\n        });\n    }\n    /**\n     * Gets the `AbortSignal` instance that can be used to listen for abort events.\n     *\n     * **Note:** this signal is internal to the `FalStream` instance. If you pass your\n     * own abort signal, the `FalStream` will listen to it and abort it appropriately.\n     *\n     * @returns the `AbortSignal` instance.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n     */\n    get signal() {\n        return this.abortController.signal;\n    }\n    /**\n     * Gets the request id of the streaming request.\n     *\n     * @returns the request id.\n     */\n    get requestId() {\n        return this._requestId;\n    }\n}\nexports.FalStream = FalStream;\nfunction createStreamingClient({ config, storage, }) {\n    return {\n        stream(endpointId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const input = options.input\n                    ? yield storage.transformInput(options.input)\n                    : undefined;\n                return new FalStream(endpointId, config, Object.assign(Object.assign({}, options), { input: input }));\n            });\n        },\n    };\n}\n//# sourceMappingURL=streaming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/types/common.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/types/common.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isQueueStatus = isQueueStatus;\nexports.isCompletedQueueStatus = isCompletedQueueStatus;\nfunction isQueueStatus(obj) {\n    return obj && obj.status && obj.response_url;\n}\nfunction isCompletedQueueStatus(obj) {\n    return isQueueStatus(obj) && obj.status === \"COMPLETED\";\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3R5cGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvc2Vhbi9mdXR1cmUvbm9kZV9tb2R1bGVzL0BmYWwtYWkvY2xpZW50L3NyYy90eXBlcy9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzUXVldWVTdGF0dXMgPSBpc1F1ZXVlU3RhdHVzO1xuZXhwb3J0cy5pc0NvbXBsZXRlZFF1ZXVlU3RhdHVzID0gaXNDb21wbGV0ZWRRdWV1ZVN0YXR1cztcbmZ1bmN0aW9uIGlzUXVldWVTdGF0dXMob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouc3RhdHVzICYmIG9iai5yZXNwb25zZV91cmw7XG59XG5mdW5jdGlvbiBpc0NvbXBsZXRlZFF1ZXVlU3RhdHVzKG9iaikge1xuICAgIHJldHVybiBpc1F1ZXVlU3RhdHVzKG9iaikgJiYgb2JqLnN0YXR1cyA9PT0gXCJDT01QTEVURURcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/types/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/utils.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureEndpointIdFormat = ensureEndpointIdFormat;\nexports.parseEndpointId = parseEndpointId;\nexports.isValidUrl = isValidUrl;\nexports.throttle = throttle;\nexports.isReact = isReact;\nexports.isPlainObject = isPlainObject;\nexports.sleep = sleep;\nfunction ensureEndpointIdFormat(id) {\n    const parts = id.split(\"/\");\n    if (parts.length > 1) {\n        return id;\n    }\n    const [, appOwner, appId] = /^([0-9]+)-([a-zA-Z0-9-]+)$/.exec(id) || [];\n    if (appOwner && appId) {\n        return `${appOwner}/${appId}`;\n    }\n    throw new Error(`Invalid app id: ${id}. Must be in the format <appOwner>/<appId>`);\n}\nconst ENDPOINT_NAMESPACES = [\"workflows\", \"comfy\"];\nfunction parseEndpointId(id) {\n    const normalizedId = ensureEndpointIdFormat(id);\n    const parts = normalizedId.split(\"/\");\n    if (ENDPOINT_NAMESPACES.includes(parts[0])) {\n        return {\n            owner: parts[1],\n            alias: parts[2],\n            path: parts.slice(3).join(\"/\") || undefined,\n            namespace: parts[0],\n        };\n    }\n    return {\n        owner: parts[0],\n        alias: parts[1],\n        path: parts.slice(2).join(\"/\") || undefined,\n    };\n}\nfunction isValidUrl(url) {\n    try {\n        const { host } = new URL(url);\n        return /(fal\\.(ai|run))$/.test(host);\n    }\n    catch (_) {\n        return false;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(func, limit, leading = false) {\n    let lastFunc;\n    let lastRan;\n    return (...args) => {\n        if (!lastRan && leading) {\n            func(...args);\n            lastRan = Date.now();\n        }\n        else {\n            if (lastFunc) {\n                clearTimeout(lastFunc);\n            }\n            lastFunc = setTimeout(() => {\n                if (Date.now() - lastRan >= limit) {\n                    func(...args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    };\n}\nlet isRunningInReact;\n/**\n * Not really the most optimal way to detect if we're running in React,\n * but the idea here is that we can support multiple rendering engines\n * (starting with React), with all their peculiarities, without having\n * to add a dependency or creating custom integrations (e.g. custom hooks).\n *\n * Yes, a bit of magic to make things works out-of-the-box.\n * @returns `true` if running in React, `false` otherwise.\n */\nfunction isReact() {\n    if (isRunningInReact === undefined) {\n        const stack = new Error().stack;\n        isRunningInReact =\n            !!stack &&\n                (stack.includes(\"node_modules/react-dom/\") ||\n                    stack.includes(\"node_modules/next/\"));\n    }\n    return isRunningInReact;\n}\n/**\n * Check if a value is a plain object.\n * @param value - The value to check.\n * @returns `true` if the value is a plain object, `false` otherwise.\n */\nfunction isPlainObject(value) {\n    return !!value && Object.getPrototypeOf(value) === Object.prototype;\n}\n/**\n * Utility function to sleep for a given number of milliseconds\n */\nfunction sleep(ms) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    });\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsdUJBQXVCO0FBQ3ZCLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIsZUFBZTtBQUNmLHFCQUFxQjtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUyxHQUFHLE1BQU07QUFDcEM7QUFDQSx1Q0FBdUMsR0FBRztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3NlYW4vZnV0dXJlL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW5zdXJlRW5kcG9pbnRJZEZvcm1hdCA9IGVuc3VyZUVuZHBvaW50SWRGb3JtYXQ7XG5leHBvcnRzLnBhcnNlRW5kcG9pbnRJZCA9IHBhcnNlRW5kcG9pbnRJZDtcbmV4cG9ydHMuaXNWYWxpZFVybCA9IGlzVmFsaWRVcmw7XG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGU7XG5leHBvcnRzLmlzUmVhY3QgPSBpc1JlYWN0O1xuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbmV4cG9ydHMuc2xlZXAgPSBzbGVlcDtcbmZ1bmN0aW9uIGVuc3VyZUVuZHBvaW50SWRGb3JtYXQoaWQpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGlkLnNwbGl0KFwiL1wiKTtcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIGNvbnN0IFssIGFwcE93bmVyLCBhcHBJZF0gPSAvXihbMC05XSspLShbYS16QS1aMC05LV0rKSQvLmV4ZWMoaWQpIHx8IFtdO1xuICAgIGlmIChhcHBPd25lciAmJiBhcHBJZCkge1xuICAgICAgICByZXR1cm4gYCR7YXBwT3duZXJ9LyR7YXBwSWR9YDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFwcCBpZDogJHtpZH0uIE11c3QgYmUgaW4gdGhlIGZvcm1hdCA8YXBwT3duZXI+LzxhcHBJZD5gKTtcbn1cbmNvbnN0IEVORFBPSU5UX05BTUVTUEFDRVMgPSBbXCJ3b3JrZmxvd3NcIiwgXCJjb21meVwiXTtcbmZ1bmN0aW9uIHBhcnNlRW5kcG9pbnRJZChpZCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRJZCA9IGVuc3VyZUVuZHBvaW50SWRGb3JtYXQoaWQpO1xuICAgIGNvbnN0IHBhcnRzID0gbm9ybWFsaXplZElkLnNwbGl0KFwiL1wiKTtcbiAgICBpZiAoRU5EUE9JTlRfTkFNRVNQQUNFUy5pbmNsdWRlcyhwYXJ0c1swXSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG93bmVyOiBwYXJ0c1sxXSxcbiAgICAgICAgICAgIGFsaWFzOiBwYXJ0c1syXSxcbiAgICAgICAgICAgIHBhdGg6IHBhcnRzLnNsaWNlKDMpLmpvaW4oXCIvXCIpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogcGFydHNbMF0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG93bmVyOiBwYXJ0c1swXSxcbiAgICAgICAgYWxpYXM6IHBhcnRzWzFdLFxuICAgICAgICBwYXRoOiBwYXJ0cy5zbGljZSgyKS5qb2luKFwiL1wiKSB8fCB1bmRlZmluZWQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRVcmwodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBob3N0IH0gPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIHJldHVybiAvKGZhbFxcLihhaXxydW4pKSQvLnRlc3QoaG9zdCk7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgbGltaXQsIGxlYWRpbmcgPSBmYWxzZSkge1xuICAgIGxldCBsYXN0RnVuYztcbiAgICBsZXQgbGFzdFJhbjtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKCFsYXN0UmFuICYmIGxlYWRpbmcpIHtcbiAgICAgICAgICAgIGZ1bmMoLi4uYXJncyk7XG4gICAgICAgICAgICBsYXN0UmFuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsYXN0RnVuYykge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChsYXN0RnVuYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RnVuYyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdFJhbiA+PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UmFuID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBsaW1pdCAtIChEYXRlLm5vdygpIC0gbGFzdFJhbikpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmxldCBpc1J1bm5pbmdJblJlYWN0O1xuLyoqXG4gKiBOb3QgcmVhbGx5IHRoZSBtb3N0IG9wdGltYWwgd2F5IHRvIGRldGVjdCBpZiB3ZSdyZSBydW5uaW5nIGluIFJlYWN0LFxuICogYnV0IHRoZSBpZGVhIGhlcmUgaXMgdGhhdCB3ZSBjYW4gc3VwcG9ydCBtdWx0aXBsZSByZW5kZXJpbmcgZW5naW5lc1xuICogKHN0YXJ0aW5nIHdpdGggUmVhY3QpLCB3aXRoIGFsbCB0aGVpciBwZWN1bGlhcml0aWVzLCB3aXRob3V0IGhhdmluZ1xuICogdG8gYWRkIGEgZGVwZW5kZW5jeSBvciBjcmVhdGluZyBjdXN0b20gaW50ZWdyYXRpb25zIChlLmcuIGN1c3RvbSBob29rcykuXG4gKlxuICogWWVzLCBhIGJpdCBvZiBtYWdpYyB0byBtYWtlIHRoaW5ncyB3b3JrcyBvdXQtb2YtdGhlLWJveC5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiBydW5uaW5nIGluIFJlYWN0LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNSZWFjdCgpIHtcbiAgICBpZiAoaXNSdW5uaW5nSW5SZWFjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIGlzUnVubmluZ0luUmVhY3QgPVxuICAgICAgICAgICAgISFzdGFjayAmJlxuICAgICAgICAgICAgICAgIChzdGFjay5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLmluY2x1ZGVzKFwibm9kZV9tb2R1bGVzL25leHQvXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzUnVubmluZ0luUmVhY3Q7XG59XG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gc2xlZXAgZm9yIGEgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICovXG5mdW5jdGlvbiBzbGVlcChtcykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/utils.js\n");

/***/ })

};
;